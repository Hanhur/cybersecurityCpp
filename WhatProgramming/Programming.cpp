/**
 * Программирование - это процесс написание программы. 
 * В свою очередь,программа - это набор инструкций, которые должен выполнить компьютер.
 * Программа может быть написана на любом языке программирования.
 * 
 * Компьютер понимает только машинный язык. Он не понимает ни С, ни Python, ни Java. 
 * Он понимает только последовательность нулей и единиц, последовательность которых зависит от архитектуры компьютера.
 * 
 * Наиболее часто распространенным вариантом транслятора является Ассемблер. 
 * Язык Ассемблера хоть и сложнее высокоуровневых языков вроде С++, но вполне осваиваемый для человека. 
 * Пример простейшей программы на Ассемблере, которая выполняет сложение двух чисел:
 * 
 * mov еах, 14
 * mov еbх, 10
 * add еах, еbх
 * 
 * Язык ассемблера не является интуитивно понятным. К тому же инструкции зависят от используемой архитектуры. 
 * Одна и та же программа будет отличаться для архитектуры х86 и SPARC. 
 * Если вы написали программу для х86, а затем хотите запускать ее на процессорах с RISС-архитектурой, программу придется переписать. 
 * Хотя бы потому, что даже регистры используются разные.
 * 
 * А вот языки программирования высокого уровня могут умирать, например, взять те же языки Fortran и Basic, 
 * которые были в свое время очень популярны. Взять тот же Pascal и среду разработки Delphi. 
 * Сейчас они на свалке истории. Языку С/С++ повезло больше - он вне времени, это стандарт, 
 * который будет актуален еще долгое время - пожалуй до того момента, пока компьютер не начнет сами писать программы. 
 * Он будет их писать сразу на машинном языке, минуя всякие языки-посредники, понятные для человека.
 */

// Условная конструкция
// Синтаксис условной конструкции if-then-else довольно прост и похож на условный оператор в языке Pascal:
/*
if (условие) then
{
    набор команд, которые будут выполнены, если условие истинно;
}
else
{
    набор команд, которые будут выполнены, если условие ложно;
}

//Скидка = Продукт.ПолучитьСкидку;
if (Скидка) then 
{
    Продукт.ВыключитьОплатуЧастями;
}
else {
    Продукт.ВключитьОплатуЧастями;
}
*/

/*
    Существуют языки, которые подразумевают использования служебного слова then - к ним относятся Pascal, Basic, Fortran. 
    В языке С служебное слово then не используется. Также в языке С допускается опустить фигурные скобки,
    если набор команд состоит всего лишь из одной команды. Мы можем переписать наш псевдокод в стиле С:

    Скидка = Продукт.ПолучитьСкидку;
    if (Скидка)
        Продукт.ВыключитьОплатуЧастями;
    else
        Продукт.ВключитьОплатуЧастями;
*/

/*
    Циклы

    Циклы позволяют выполнять одну и ту же последовательность действий
    несколько раз либо бесконечно. Все зависит от алгоритма работы программ.
    Классическими циклами считаются циклы while и until.

    Команды, которые будут повторяться в цикле, называются телом цикла.
    Каждый проход цикла называется итерацией. Так вот, цикл while будет выполнять
    тело цикла, пока условие истинно. Синтаксис цикла while выглядит
    так:

    while (условие)
    {
        тело цикла;
    }

    Пример цикла while:
    while (1)
    {
        ОтправитьПинг(IР-адрес);
    }

    while (Бак.ОстатокТоплива() < 10)
    {
        ВключитьКонтрольнуюЛампу(МалоТоплива);
    }

    Цик л until ("пока не") используется в языке Perl (в языке С+ его нет)
    и позволяет задать диаметрально противоположное условие. Пример
    программы для навигации:

    until (слева река)
    {
        двигайтесь прямо;
    }

    Учитывая, что вы пишете на С++, а в С++ нет конструкции until, вы не будете
    использовать этот цикл при написании псевдокода. Понятно, что любой
    until можно превратить в while, лишь изменив условие. Нужно отметить, что
    цикл while интуитивно более понятен и лучше избегать использования until,
    даже если он поддерживается в вашем язь1ке.
*/

/*
    Циклfоr называется циклом со счетчиком и используется, когда нужно выполнить
    определенное (четко известное) количество действий. Пример:

    for (5 раз)
        Подать сигнал;


    Данный цикл подает сигнал 5 раз. На языке С такой цикл выглядит так:

    for (i=O; i<5; i++)
        Подать сигнал;


    По сути, любой циклfоr можно превратить в while:

    i = О;
    while (i < 5)
    {
        Подать сигнал;
        i++;
    }

    Поэтому цикл while является наиболее универсальным вариантом цикла.
*/
