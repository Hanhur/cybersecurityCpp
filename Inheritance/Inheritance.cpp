/*
    Наследование - это один из краеугольных принципов обьектно-ориентированного программирования. 
    Допустим, есть какой-то базовый класс, функциональность которого вам нужно расширить. Вы создаете производный
    класс на его базе и вам не нужно повторять в нем функционал базового класса - он будет унаследован.

    class имя_производного_класса: доступ имя базового класса {
    //
    } ;

    Здесь доступ - это модификатор доступа, который может бытьриЬ/iс,private
    или protected. Чаше всего используются риЬ/iс или private. В первом случае
    все открытые члены базового класса останутся открытыми и в производном.
    Во втором (private) все открытые члены базового класса в производном станут закрытыми.
*/

// Пример наследования класса

# include <iostream>
using namespace std;

class parent {
    int x;
    public:
        void setx(int n)
        {
            x = n;
        }
        void showx()
        {
            cout << x << endl;
        }
};

class child: public parent {
    int y;
    public:
        void sety(int n)
        {
            y = n;
        }
        void showy()
        {
            cout << y << endl;
        }
};

int main() 
{
    child ob;

    ob.setx(100); // получаем доступ к члену базового класса
    ob.sety(200); // получаем доступ к члену производного класса

    ob.showx(); // доступ к члену базового класса
    ob.showy(); // доступ к члену производного класса

    return 0;
}